"""
Django settings for myapp project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from environs import Env

from datetime import timedelta
from rest_framework.settings import api_settings

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("API_SECRET_KEY", "api_secret_key")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if env("API_DEBUG_MODE", "False") == "True" else False

ALLOWED_HOSTS = env.list("API_ALLOWED_HOSTS", ["*"])
CORS_ALLOWED_ORIGINS = env.list(
    "API_CORS_ALLOWED_ORIGINS",
    ["http://localhost:3000", "http://127.0.0.1:3000"],
)
CORS_ALLOW_CREDENTIALS = True


# Application definition

LIBRARY_APP = [
    "rest_framework",
    "knox",
    "django_filters",
    "drf_yasg",
    "corsheaders",
]

INTERNAL_APP = [
    "myapp.authentication",
    "myapp.core",
    "myapp.ticket",
    "myapp.notification",
]


INSTALLED_APPS = (
    [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
    ]
    + LIBRARY_APP
    + INTERNAL_APP
)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "myapp.core.middleware.DatabaseLoggingMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "myapp.urls"
AUTH_USER_MODEL = "authentication.CustomUser"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "myapp.wsgi.application"

# Rest framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "knox.auth.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated"
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend"
    ],
}

# Knox security framework
REST_KNOX = {
    "SECURE_HASH_ALGORITHM": "cryptography.hazmat.primitives.hashes.SHA512",
    "AUTH_TOKEN_CHARACTER_LENGTH": 64,
    "TOKEN_TTL": timedelta(hours=48),
    "USER_SERIALIZER": "myapp.authentication.serializers.UserProfileSerializer",
    "TOKEN_LIMIT_PER_USER": None,
    "AUTO_REFRESH": False,
    "EXPIRY_DATETIME_FORMAT": api_settings.DATETIME_FORMAT,
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"
    },
]

AUTHENTICATION_BACKENDS = ["myapp.authentication.backends.EmailBackend"]

AUTH_COOKIE_NAME = "token"
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DATABASE_NAME", "django"),
        "USER": env("DATABASE_USER", "django"),
        "PASSWORD": env("DATABASE_PASSWORD", "django"),
        "HOST": env("DATABASE_HOST", "localhost"),
        "PORT": env("DATABASE_PORT", "5432"),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/api/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Loggin
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            "format": "[%(asctime)s][%(levelname)8s][%(name)30.30s]@[%(lineno)5s] : %(message)s"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "console",
        }
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
        "formatter": "console",
    },
    "loggers": {
        "django": {"handlers": ["console"], "propagate": False},
        "django.request": {"handlers": ["console"], "propagate": True},
        "": {"handlers": ["console"]},
    },
}


EMAIL_BACKEND="django.core.mail.backends.console.EmailBackend"
if DEBUG == False and env("API_EMAIL_HOST_USER", False) and env("API_EMAIL_HOST_PASSWORD", False): 
    EMAIL_BACKEND="django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = env("API_EMAIL_HOST")
    EMAIL_HOST_USER = env("API_EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = env("API_EMAIL_HOST_PASSWORD")
    EMAIL_PORT = env("API_EMAIL_PORT")
    EMAIL_USE_TLS = True if env("API_EMAIL_USE_TLS", False) == "True" else False
    EMAIL_USE_SSL = True if env("API_EMAIL_USE_SSL", False) == "True" else False
    DEFAULT_FROM_EMAIL = env("API_DEFAULT_FROM_EMAIL")


FRONTEND_URL = env("API_FRONTEND_URL", "localhost:3000")
