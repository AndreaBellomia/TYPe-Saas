version: "3.9"
name: ticket-crm-prod

services:
  db:
    image: postgres
    container_name: postgres-ticketcrm-prod
    restart: always
    environment:
      - POSTGRES_USER=django
      - POSTGRES_PASSWORD=django123
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-network

  migrations:
    image: api-server-migration
    build:
      context: ../../
      dockerfile: ./docker/production/Dockerfile-api
    command: poetry run ./manage.py migrate
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=True
      - DB_USER=django
      - DB_PASSWORD=django123
      - DB_HOST=db
      - DB_PORT=5432
    networks:
      - app-network

  api:
    image: api-server
    build:
      context: ../../
      dockerfile: ./docker/production/Dockerfile-api
    container_name: api-server-gunicorn
    restart: always
    command: poetry run ./manage.py runserver 0.0.0.0:8000
    environment:
      - DEBUG=True
      - DB_USER=django
      - DB_PASSWORD=django123
      - DB_HOST=db
      - DB_PORT=5432
    ports:
      - 8000:8000
    # env_file:
    #   - ./.env.dev
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  frontend:
    image: frontend-server
    build:
      context: ../../
      dockerfile: ./docker/production/Dockerfile-frontend
    container_name: frontend-server
    restart: always
    ports:
      - 3000:3000
    networks:
      - app-network

  nginx:
    image: nginx
    build:
      context: ../../
      dockerfile: ./docker/production/Dockerfile-nginx
    restart: always
    container_name: nginx
    ports:
      - 1337:80
    depends_on:
      - api
      - frontend
    networks:
      - app-network

volumes:
  db:
    driver: local

networks:
  app-network:
    driver: bridge
